{"version":3,"sources":["components/QuizModal/QuizModal.js","components/ResultModal/ResultModal.js","components/QuizForm/QuizForm.js","screens/HomeScreen.js","App.js","reportWebVitals.js","index.js"],"names":["QuizModal","useState","open","changeOpen","useFetch","loading","error","data","Modal","onClose","Card","style","maxWidth","margin","CardContent","Typography","variant","count","CardActions","Button","disabled","color","onClick","CircularProgress","ResultModal","score","total","show","result","width","CardActionArea","CardMedia","image","height","summary","toFixed","defaultProps","QuizForm","useForm","handleSubmit","errors","formState","control","setResult","showResult","setShowResult","maxHeight","overflow","onSubmit","formData","fetch","body","JSON","stringify","method","headers","then","res","ok","json","Error","quizResult","catch","e","console","map","question","FormControl","display","component","id","FormLabel","FormHelperText","rules","required","name","render","field","RadioGroup","options","option","FormControlLabel","value","Radio","label","type","HomeScreen","AppBar","position","Toolbar","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.964064e0.chunk.js","sourcesContent":["import {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CircularProgress,\r\n  Modal,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport useFetch from 'use-http';\r\n\r\nconst QuizModal = () => {\r\n  const [open, changeOpen] = useState(true);\r\n  const {\r\n    loading,\r\n    error,\r\n    data = {},\r\n  } = useFetch('/api/questions/count', {}, []);\r\n\r\n  return (\r\n    <Modal open={open} onClose={() => changeOpen(false)}>\r\n      <Card\r\n        style={{\r\n          maxWidth: 600,\r\n          margin: '10rem auto',\r\n        }}\r\n      >\r\n        <CardContent>\r\n          {error && <Typography>Error getting the data</Typography>}\r\n          <Typography variant=\"h4\">Welcome to the quiz</Typography>\r\n          <Typography>This is your first time giving the quiz</Typography>\r\n          <Typography>There are {data.count} questions to answer.</Typography>\r\n          <Typography>Press below to start the quiz</Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            disabled={!!error}\r\n            color=\"primary\"\r\n            onClick={() => changeOpen(false)}\r\n          >\r\n            {loading ? <CircularProgress /> : 'Start the quiz'}\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default QuizModal;\r\n","import React from 'react';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActionArea,\r\n  CardActions,\r\n  CardContent,\r\n  CardMedia,\r\n  Modal,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst calculatePercentage = (score, total) =>\r\n  ((score / total) * 100).toFixed(2);\r\n\r\nconst ResultModal = ({ show, onClose, result }) => (\r\n  <Modal open={show} onClose={onClose}>\r\n    <Card\r\n      style={{\r\n        width: 500,\r\n        margin: '10rem auto',\r\n      }}\r\n    >\r\n      <CardActionArea>\r\n        <CardMedia\r\n          image=\"https://material-ui.com/static/images/cards/contemplative-reptile.jpg\"\r\n          style={{\r\n            width: '100%',\r\n            height: 140,\r\n          }}\r\n        />\r\n        <CardContent>\r\n          <Typography>You {result.summary}</Typography>\r\n          <Typography>\r\n            You scored {result.score} out of {result.total}\r\n          </Typography>\r\n          <Typography>\r\n            That&apos;s {calculatePercentage(result.score, result.total)}%\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button onClick={onClose}>Close</Button>\r\n      </CardActions>\r\n    </Card>\r\n  </Modal>\r\n);\r\n\r\nResultModal.propTypes = {\r\n  show: PropTypes.bool,\r\n  onClose: PropTypes.func.isRequired,\r\n  result: PropTypes.shape({\r\n    score: PropTypes.number,\r\n    total: PropTypes.number,\r\n    summary: PropTypes.string,\r\n  }),\r\n};\r\n\r\nResultModal.defaultProps = {\r\n  show: false,\r\n  result: {\r\n    score: 0,\r\n    total: 1,\r\n    summary: 'failed',\r\n  },\r\n};\r\n\r\nexport default ResultModal;\r\n","import React, { useState } from 'react';\r\nimport useFetch from 'use-http';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CircularProgress,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormHelperText,\r\n  FormLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport ResultModal from '../ResultModal/ResultModal';\r\n\r\nconst QuizForm = () => {\r\n  const { loading, error, data = [] } = useFetch('/api/questions/', {}, []);\r\n  const {\r\n    handleSubmit,\r\n    formState: { errors },\r\n    control,\r\n  } = useForm();\r\n  const [result, setResult] = useState({});\r\n  const [showResult, setShowResult] = useState(false);\r\n\r\n  const onSubmit = (formData) => {\r\n    fetch('/api/questions/result', {\r\n      body: JSON.stringify(formData),\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        throw new Error('error with posting results');\r\n      })\r\n      .then((quizResult) => {\r\n        setResult(quizResult);\r\n        setShowResult(true);\r\n      })\r\n      .catch((e) => {\r\n        console.error('Error sending result', e);\r\n      });\r\n  };\r\n\r\n  if (loading) {\r\n    return <CircularProgress aria-busy />;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Card>\r\n        <Typography>Error fetching data from the server</Typography>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      style={{\r\n        maxWidth: 600,\r\n        margin: '4rem auto',\r\n        maxHeight: '80vh',\r\n        overflow: 'auto',\r\n      }}\r\n    >\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {data.map((question) => (\r\n          <FormControl\r\n            style={{\r\n              margin: 20,\r\n              display: 'flex',\r\n            }}\r\n            key={question.id}\r\n            component=\"fieldset\"\r\n            error={!!errors[question.id]}\r\n          >\r\n            <FormLabel component=\"legend\">{question.question}</FormLabel>\r\n            <FormHelperText>\r\n              {errors[question.id] && 'Please select an option'}\r\n            </FormHelperText>\r\n            <Controller\r\n              rules={{ required: true }}\r\n              control={control}\r\n              name={question.id}\r\n              render={({ field }) => (\r\n                <RadioGroup {...field}>\r\n                  {question.options.map((option) => (\r\n                    <FormControlLabel\r\n                      key={option}\r\n                      value={option}\r\n                      control={<Radio />}\r\n                      label={option}\r\n                    />\r\n                  ))}\r\n                </RadioGroup>\r\n              )}\r\n            />\r\n          </FormControl>\r\n        ))}\r\n        <Button color=\"primary\" style={{ width: '100%' }} type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </form>\r\n\r\n      <ResultModal\r\n        show={showResult}\r\n        result={result}\r\n        onClose={() => setShowResult(false)}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default QuizForm;\r\n","import React from 'react';\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\r\nimport QuizModal from '../components/QuizModal/QuizModal';\r\nimport QuizForm from '../components/QuizForm/QuizForm';\r\n\r\nconst HomeScreen = () => (\r\n  <div>\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography variant=\"h6\">Quiz App</Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n    <QuizForm />\r\n    <QuizModal />\r\n  </div>\r\n);\r\n\r\nexport default HomeScreen;\r\n","import './App.css';\r\nimport React from 'react';\r\nimport HomeScreen from './screens/HomeScreen';\r\n\r\nconst App = () => <HomeScreen />;\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}